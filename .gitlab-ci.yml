# Cache gems in between builds
stages:
  - build
  - test
  - prepare
  - deploy

cache:
  key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
  paths:
    - vendor

.before_script: &before_script
  # rails 5.1 and lower need older version of bundler
  - bundle install

.prepare_dbs: &prepare_dbs
  - PGPASSWORD=password createdb -h postgres -U oauth oauth-unique 'oauth database to keep single row for access tokens'
  - MYSQL_PWD=password mysql -h mysql -u root -e 'CREATE DATABASE oauthunique'

.deps_alpine: &deps_alpine
  - apk --update add shared-mime-info g++ make sqlite sqlite-dev postgresql-client postgresql-dev mysql-client mysql-dev git

.test: &test
- "DATABASE_URL=sqlite3::memory: bundle exec rake test:ci"
- "DATABASE_URL=postgresql://oauth:password@postgres/oauth bundle exec rake test"
# concurrency limited with mysql, to avoid deadlock messages
- "DATABASE_URL=mysql2://root:password@mysql/oauth bundle exec rake test"
# DB optimization modes
- "DATABASE_URL=postgresql://oauth:password@postgres/oauth-unique ONLY_ONE_TOKEN=1 bundle exec rake test"
- "DATABASE_URL=mysql2://root:password@mysql/oauthunique ONLY_ONE_TOKEN=1 bundle exec rake test"
# JWT supported libs
- "JWT_LIB=json/jwt DATABASE_URL=sqlite3::memory: bundle exec rake test"

.jtest: &jtest
- "DATABASE_URL=sqlite3::memory: bundle exec rake test"
- "DATABASE_URL=postgresql://oauth:password@postgres/oauth bundle exec rake test"
- "DATABASE_URL=mysql://root:password@mysql/oauth bundle exec rake test"
# JWT supported libs
- "JWT_LIB=json/jwt DATABASE_URL=postgresql://oauth:password@postgres/oauth bundle exec rake test"

.test_services: &test_services
 services:
    -
      name: postgres:13-alpine
      alias: postgres
      # entrypoint: ["/usr/local/bin/db-postgres"]
    -
      name: mysql:8
      alias: mysql
      command:
        - --default-authentication-plugin
        - mysql_native_password

variables:
  BUNDLE_JOBS: 10
  BUNDLE_PATH: vendor
  CI: 1
  PARALLEL: 1
  # Postgres
  POSTGRES_DB: oauth
  POSTGRES_USER: oauth
  POSTGRES_PASSWORD: password
  POSTGRES_HOST_AUTH_METHOD: trust
  # Mysql
  MYSQL_DATABASE: oauth
  MYSQL_ROOT_PASSWORD: password

jruby:
  <<: *test_services
  cache:
    paths:
      - vendor/jruby
  allow_failure: true
  variables:
    JRUBY_OPTS: --debug
  before_script:
    - apt-get update && apt-get install -y git shared-mime-info
    - *before_script
  image: "jruby:9.2.13"
  script:
    - *jtest
  artifacts:
    paths:
      - "coverage/"
ruby23:
  <<: *test_services
  before_script:
    - *deps_alpine
    - *before_script
    - *prepare_dbs
  image: "ruby:2.3-alpine"
  script:
    - *test
  artifacts:
    paths:
      - "coverage/"
  parallel:
    matrix:
      - BUNDLE_GEMFILE: [Gemfile, Gemfile-rails52, Gemfile-rails51, Gemfile-rails50]
ruby24:
  <<: *test_services
  before_script:
    - *deps_alpine
    - *before_script
    - *prepare_dbs
  image: "ruby:2.4-alpine"
  only:
    - master
  script:
    - *test
  artifacts:
    paths:
      - "coverage/"
  parallel:
    matrix:
      - BUNDLE_GEMFILE: [Gemfile, Gemfile-rails52, Gemfile-rails51]
ruby25:
  <<: *test_services
  before_script:
    - *deps_alpine
    - *before_script
    - *prepare_dbs
  image: "ruby:2.5-alpine"
  only:
    - master
  script:
    - *test
  artifacts:
    paths:
      - "coverage/"
  parallel:
    matrix:
      - BUNDLE_GEMFILE: [Gemfile, Gemfile-rails52, Gemfile-rails51]
ruby26:
  <<: *test_services
  before_script:
    - *deps_alpine
    - *before_script
    - *prepare_dbs
  image: "ruby:2.6-alpine"
  only:
    - master
  script:
    - *test
  artifacts:
    paths:
      - "coverage/"
  parallel:
    matrix:
      - BUNDLE_GEMFILE: [Gemfile, Gemfile-rails61, Gemfile-rails60, Gemfile-rails52]
ruby27:
  <<: *test_services
  before_script:
    - *deps_alpine
    - *before_script
    - *prepare_dbs
  image: "ruby:2.7-alpine"
  script:
    - *test
  parallel:
    matrix:
      - BUNDLE_GEMFILE: [Gemfile, Gemfile-rails61, Gemfile-rails60, Gemfile-rails52]
  artifacts:
    paths:
      - "coverage/"

coverage:
  stage: prepare
  before_script:
    - apk --update add g++ make git
    - gem install simplecov --no-doc
  dependencies:
    - jruby
    - ruby23
    - ruby27
  image: "ruby:2.7-alpine"
  script:
    # this is a workaround, because simplecov doesn't support relative paths.
    #
    # https://github.com/simplecov-ruby/simplecov/issues/887
    #
    # this is necessary in our case, because coverage files are generated inside
    # the custom docker container, which runs in /home, and the absolute paths aren't
    # gonna match the paths where the files are, once we merge them. Therefore,
    # all of those have to be rewritten before the merge happens.
    #
    - find coverage -name "*resultset.json" -exec sed -i 's?/home?'`pwd`'?' {} \;
    - rake coverage:report
  artifacts:
    paths:
      - "coverage/"
jekyll:
  stage: test
  image: "ruby:2.7-alpine"
  variables:
    JEKYLL_ENV: production
    BUNDLE_GEMFILE: www/Gemfile
  before_script:
    - *deps_alpine
    - *before_script
  script:
    - bundle exec rake prepare_website
    - bundle exec jekyll build -s www -d www/public
  artifacts:
    paths:
      - www/public/
pages:
  stage: deploy
  dependencies:
    - coverage
    - jekyll
  script:
    - mv www/public .
    - mv coverage public
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master
