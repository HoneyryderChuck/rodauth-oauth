= Documentation for OAuth JWT Base feature

The +oauth_jwt_base+ feature provides functions for dealing with JWT (signing, encryption, encoding/decoding).

== Value Methods

oauth_application_jwt_public_key_param :: Form param for the oauth application client application public key.
oauth_application_jwks_param :: Form param for the oauth application client application JSON Web Keys.
oauth_jwt_keys :: collection of the auth server signing keys indexed by algo (**must** include <tt>oauth_jwt_key</tt> unless nil).
oauth_jwt_public_keys :: collection of the auth server public signing keys, which will be exposed in the JWKs endpoint.
oauth_jwt_jwe_keys :: collection of the auth server encryption keys indexed by algo/method tuple (**must** include <tt>oauth_jwe_key</tt> unless nil).
oauth_jwt_jwe_public_keys :: collection of the auth server public encryption keys, which will be exposed in the JWKs endpoint.
oauth_jwt_jwe_copyright :: copyright line to add in case JWT tokens are JWE-encrypted, <tt>nil</tt> by default (`ruby-jwe` only).
oauth_jwt_jws_algorithms_supported :: Supported JWS algorithms for signing JWT tokens.
oauth_jwt_jwe_algorithms_supported :: Supported JWE algorithms for encrypting JWT tokens.
oauth_jwt_jwe_encryption_methods_supported :: Supported JWE encryption methods for encrypting JWT tokens.

== Auth methods

jwt_encode :: encodes a given JWT token.
jwt_decode :: decodes a given JWT token.
jwt_decode_no_key :: raw-decodes a given JWT token, while performing no signature validation.
generate_jti :: generates a unique jti claimm.
oauth_jwt_issuer :: JWT issuer claim, returns the authorization server url by default.
oauth_jwt_audience :: JWT audience claim, returns the authorization server token url by default.
resource_owner_params_from_jwt_claims :: conditionals, built from JWT claims, to filter grants by a given resource owner.